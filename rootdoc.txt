= Building this documentation =

{{{
sbt clean doc
}}}

= Running in development mode =

Set `svgserver.secure=false` in `conf/application.conf`.

{{{
sbt run
}}}

Then navigate to [[http://localhost:9000]]

= Deploy =

Run over SSL. First build it:

{{{
sbt clean stage
}}}

Then put it on the server:

{{{
rsync -av --delete target/universal/stage/   $SVGSERVER:/var/www/svgserver/
rsync -av --delete public $SVGSERVER:/var/www/svgserver/
ssh $SVGSERVER "chown -R www-data:www-data  /var/www/svgserver/ "
}}}

Also copy the configuration file to the server:

{{{
scp conf/application.conf  $SVGSERVER:/var/www/svgserver.conf
ssh $SVGSERVER "chown www-data:www-data /var/www/svgserver.conf"
}}}

--- this is very convenient, because we could run with the flag  `-Dconfig.file=...` (see below)  and therefore
use different configuration file on the server (for deployment) and on the home machine (for testing).  Then edit
that configuration file on the server and set:

 1. `svgserver.secure=true`

 2. `svgserver.svgroot="/path/to/your/mathpump-1.0/other-party-name/"` --- this is where the `mathpump` puts the incoming files


In the `nginx` configuration file:

{{{
location /mathpump/ {
    auth_basic "Restricted";
    auth_basic_user_file htpasswd_mathpump;
    try_files $uri @proxy_svg;
}
location /mathpump/ws {
    auth_basic "Restricted";
    auth_basic_user_file htpasswd_mathpump;
            proxy_pass http://localhost:39001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    proxy_read_timeout 3600s;
    }
# the play web server
location @proxy_svg {
    auth_basic "Restricted";
    auth_basic_user_file htpasswd_mathpump;
    proxy_pass  http://localhost:39001;
    proxy_redirect off;
    proxy_buffering off;

    #send protocol info to play server
    proxy_set_header        Host               $host;
    proxy_set_header        X-Real-IP          $remote_addr;
    proxy_set_header        X-Forwarded-Proto  https;
    proxy_set_header        X-Forwarded-Ssl    on;
    proxy_set_header        X-Forwarded-For    $proxy_add_x_forwarded_for;
}
}}}

And, finally, run it:

{{{
sudo -u www-data /var/www/svgserver/bin/svgserver -Dhttp.port=39001 -Dhttp.address=127.0.0.1 \
-Dconfig.file=/var/www/svgserver.conf -Dpidfile.path=/tmp/svgserver.pid
}}}

'''Attention: the Java version where we compiled should not be greater than the Java version on the server!'''

= Use via remote SSH forwarding =

It is possible to use this `svgserver` without `mathpump`, using the SSH tunnel.

On your local machine, execute:

{{{
ssh -R 39001:localhost:9000  $SVGSERVER
}}}

where `$SVGSERVER` is the address of you server machine (typically VPS).

Set `svgserver.secure=true`  in `conf/application.conf`

Then in the `svgserver` directory of you local machine, simply run:

{{{
./activator run
}}}

(this will listen by default on port 9000)

Then simply go to the directory which you specified in `application.conf` as `svgserver.svgroot` and edit SVG files
there.
